# ================== WARNING =================== #
# This file is version controled (and public)    #
# Do not store secret information here. Instead, #
# Use ~/.secrets.json or ~/keys/secrets.json     #
# ============================================== #
#
# See also ~/.xonshrc and the warning there
# See also ~/.config.toml for settings
import sys
import json
from pathlib import Path
from xonsh.completers.tools import *

$XONSH_SHOW_TRACEBACK=True

def warning(msg: str):
    print_color("{BOLD_YELLOW}WARNING{BOLD_DEFAULT}:{DEFAULT} " + msg)

def todo(msg: str):
    print_color("{ITALIC_BOLD_WHITE}TODO{BOLD_DEFAULT}:{DEFAULT} " + msg)

if sys.platform != "darwin":
    # Use sqlite for history
    #
    # NOTE: This is disabled on Mac because I lost data once
    # Possibly related to an issue I read about with fsync not working on M1 Macs
    #
    # https://twitter.com/marcan42/status/1494213855387734019
    #
    # Still enabled on linux because should be more reliable than json
    $XONSH_HISTORY_BACKEND = 'sqlite'

# Use 'prompt-toolkit' for $SHELL_TYPE
#
# That is the most advanced (and hackable) shell type
$SHELL_TYPE = "prompt-toolkit"
# print_color("{YELLOW}WARNING:{DEFAULT} Using $SHELL_TYPE='{BOLD_DEFAULT}readline{DEFAULT}'")

import zsh2xonsh

# We want macports path to come after homebrew, so we initialize first
#
# This is because path prepends
if sys.platform == "darwin":
    # Add macports
    $MACPORTS_PREFIX = p"/opt/local"
    if $MACPORTS_PREFIX.is_dir() and ($MACPORTS_PREFIX / "bin").is_dir():
        $PATH.insert(0, $MACPORTS_PREFIX / "bin")
        $PATH.insert(0, $MACPORTS_PREFIX / "sbin")
    else:
        warning("Cannot find macports")
        del $MACPORTS_PREFIX

if sys.platform == "darwin":
    # NOTE: This needs to come early because everything else depends on homebrew....
    zsh2xonsh.translate_to_xonsh_and_eval($(/opt/homebrew/bin/brew shellenv))


if (dotfiles_path := Path.home() / "git/dotfiles").is_dir():
    pass
else:
    dotfiles_path = None

# Load extra path information from ~/.shell-config.py
def load_extra_config():
    import tempfile, shutil
    if dotfiles_path is None:
        warning("Unable to load configuration (missing DOTFILES)")
        return

    if not shutil.which("taplo"):
        warning("Missing required command `taplo`, can't load dotfiles")

    bootstrap_config_file = p"$HOME/.dotfiles/bootstrap-config.toml"

    if not bootstrap_config_file.is_file():
        warning("Missing bootstrap config file, can't load dotfiles")

    $MACHINE_NAME=$(taplo get --file-path @(bootstrap_config_file) ".bootstrap.machine-name").rstrip()

    config_names = ["common", $MACHINE_NAME.replace('-', '_')]
    def extend_path(value, var="PATH", *, order=None):
        assert not var.startswith('$') and var.endswith('PATH'), f"Not a path variable: {var!r}"
        assert isinstance(value, str), f"Unexpected path value: {value!r}"
        if not Path(value).exists():
            warning(f"Path doesn't exist {value!r} (ignoring)")
            return
        try:
            path = __xonsh__.env[var]
        except KeyError:
            # Initialize new path variable
            __xonsh__.env[var] = type($PATH)([value])
            return # No need to check
        if order is not None and order.endswith(system_suffix := "-system"):
            todo(f"Implement distinction between regular and 'system' order: {order!r}")
            order = order[:-len(system_suffix)]
        if str(value) not in path and value not in path:
            match order:
                # NOTE: `append` is the default
                case 'append' | None:
                    path.append(value)
                case 'prepend':
                    path.insert(0, value)
                case _:
                    warning(f"Unknown order {order}")

    extra_builtins={
        'extend_path': (extend_path),
        'warning': warning
    }
    translation_script = dotfiles_path / "translate_shell_config"
    $DOTFILES_PATH=dotfiles_path
    with tempfile.TemporaryDirectory() as dir:
        translated_config_files = []
        args = ["--mode", "xonsh", "--mod-path", "machines"]
        for mod_name in config_names:
            translated_config = Path(dir) / mod_name
            args.extend(("--module", f"shellrc.{mod_name}", "--out", translated_config))
        # Run translation as subprocess to inherit updated $PATH variable
        @(translation_script) @(args)
    for translated_config_file in translated_config_files:
        with open(translated_config_file, 'rt') as f:
            translated_config = f.read()
        # Execute translated code
        execx(translated_config,  mode='exec', locs={}, glbs=extra_builtins)

load_extra_config()
del load_extra_config  # should never need to use again

def get_by_key(data: dict, key: str, default=None):
    assert isinstance(key, str)
    res = data
    for part in key.split("."):
        try:
            res = res[part]
        except (KeyError, TypeError):
            return None
    return res if res is not None else default

# Workaround for issues 4243 and 3263
# TODO: Is this nessicary anymore?
import builtins
import xonsh
# NOTE: kitty is marked unthreadable because of 'kitty diff'
# TODO: Is this fixed with the recent changes?
for cmd in ('git', 'gh', 'nvim', 'neovim', 'kitty', 'rua', 'cargo'):
    builtins.__xonsh__.commands_cache.threadable_predictors[cmd] = xonsh.commands_cache.predict_false

from xonsh.ansi_colors import ansi_partial_color_format
# NOTE: We use our own emulation of 'gitfast' instead of builtin '{gitstatus}'
# TODO: Move this to a 'xontrib'

def last_command_success():
    """Return green if the last command was a success, red otherwise"""
    history = __xonsh__.history
    history_len = len(history)
    ok_status = "{GREEN}"
    fail_status = "{RED}"
    if history_len == 0:
        # Starting with a clean slate
        return ok_status
    # TODO: Why can't we use negative indexes?
    # NOTE: Using an arbitrary expression inside the index  seems to choke
    # the parser. Even worse, there is no error message.
    #
    # They are using 'ply' for parsing and man are the error messages bad -_-
    history_index = history_len - 1
    last_entry = history[history_index]
    if last_entry.rtn == 0:
        # Success
        return ok_status
    else:
        return fail_status

$PROMPT_FIELDS['last_command_success'] = last_command_success
$PROMPT_FIELDS['hacky_gitfast_status'] = lambda: f" {x}" if (x := hacky_emulate_gitfast_status()) is not None else ""

# NOTE: We also prefix with 'py' to indicate we are in xonsh
# We really should be prefixing with 'xonsh', but 'py' is shorter
# It's not really ambiguous, since this is really the python-prompt (for all intents and purposes)
# I'm not going to confuse with the regular python interpreter (python3) cause i'll know its a shell
$PROMPT = '{YELLOW}py{last_command_success}âžœ {BOLD_CYAN}{cwd_base}{hacky_gitfast_status}{RESET} '

# See xonsh/xonsh#4623
def better_kitty_integration():
    OSC=b"\0x1b\0x5d"
    ST=b"\0x1b\0x5c"
    # Try $PS1?
    $PROMPT.insert(0, f"{OSC};A{ST}")


# List of modules:
# 1. fish_completer Better completion than bash-completions (BETA)
# 2. jedi - Python autocomplete
# 3. back2dir - Automatically restart at the last directory
# 4. term-integration - kitty integration
xontrib load fish_completer
xontrib load jedi back2dir
xontrib load term_integration

# NOTE: Disabled because of crash. See xonsh/xonsh#4665
#
# I have not reported this bug because it only happens on the latest main
# commit not on the latest stable version (0.11.0).
#
# TODO: Report this to the xontrib authors once a new xonsh version is released.
#
# xontrib load readable-traceback

# Use terminal-default theme
$XONSH_COLOR_STYLE='default'

# This is surreal, I'm programing a shell file in Python

try:
    import pygit2
except ImportError:
    pygit2 = None

# Attempt to emulate the status prompt from 'ohmyzsh' plugin 'gitfast'
# See https://github.com/ohmyzsh/ohmyzsh/blob/c52e646bb7b109e15/plugins/gitfast/git-prompt.sh#L341
#
# TODO: If this ever gets better, make it a custom 'xonsh' extension
def hacky_emulate_gitfast_status():
    if pygit2 is None:
        # Dependency missing :(
        return None
    todo_marker = "{CYAN}(TODO: Implement details){BOLD_RED}"
    repo_path = pygit2.discover_repository(".")
    if repo_path is None:
        return None
    repo = pygit2.Repository(repo_path)
    result = ["{BOLD_BLUE}git:({BOLD_RED}"]
    if repo.is_bare:
        result.append("BARE:")
    if repo.head_is_detached or repo.head_is_unborn:
        try:
            # git describe --tags --exact-match HEAD
            tag_name = repo.describe('HEAD', describe_strategy=pygit2.GIT_DESCRIBE_TAGS, max_candidates_tags=0)
        except (KeyError, pygit2.GitError):
            try:
                if repo.head is not None:
                    resolved_head_target = repo.get(repo.head.target)
                else:
                    resolved_head_target = None
            except pygit2.GitError: # Unable to resolve head
                resolved_head_target = None
            if resolved_head_target is not None:
                result.append("(")
                result.append(resolved_head_target.short_id)
                result.append("...)")
            elif repo.head_is_unborn:
                try:
                    head = repo.lookup_reference('HEAD')
                    expected_prefix = "refs/heads/"
                    if head.target.startswith(expected_prefix):
                        head_name = head.target[len(expected_prefix):]
                    else:
                        head_name = head.target
                except GitError as e: # Blegh
                    result.append("ERROR")
                else:
                    result.append(head_name)
            else:
                result.append("DETATCHED")
                result.append(todo_marker)
        else:
            # Succssfully described tag
            result.append(f"({tag_name})")
    else:
        result.append(repo.head.shorthand)
    result.append("{BOLD_BLUE})")
    return ''.join(result)

$PROMPT_FIELDS['hacky_gifast_status'] = hacky_emulate_gitfast_status

# TODO: Somehow the PATH automatically gets my extensions from ~/.zshrc???
# This is creepy...
#
# EDIT: I think it's just inheriting the enviornment from the parent (because I spawn 'xonsh' inside of 'zsh')

# NOTE: Ported from ~/.zshrc

# Better time command
# See stackoverflow: https://superuser.com/a/767491
$TIMEFMT = r"""%J   %U  user %S system %P cpu %*E total
avg shared (code):         %X KB
avg unshared (data/stack): %D KB
total (sum):               %K KB
max memory:                %M MB
page faults from disk:     %F
other page faults:         %R"""

# Let rshell be an alias for evcxr
def rshell_alias(args):
    print_color("Using {BOLD_DEFAULT}evcxr{RESET} as Rust REPL (alias)")
    print()
    ![evcxr @(args)]
aliases['rshell'] = rshell_alias

def should_skip_startup_message(msg_id: str) -> bool:
    if 'SKIP_XONSH_STARTUP_MESSAGES' not in ${...}:
        return False
    skip_list = $SKIP_XONSH_STARTUP_MESSAGES
    return msg_id in skip_list.split(',') or skip_list == "*"

# Alias cp to use --reflink=auto by default
# This is zero-cost since we use btrfs
#
# NOTE: This is now unnecessary due to cp version >=.
# 
# NOTE: See also analogue in ~/.zshrc
#
# cp_version=tuple(map(int, $(cp --version | rg r'cp .* (\d+\.\d+)' -r '$1').strip().split('.')))
# assert len(cp_version) == 2, f"Unexpected cp version: {cp_version!r}"
# filesystem_type=$(df --output=fstype ~ | grep -v 'Type').strip()
# if filesystem_type != "btrfs":
#    print(ansi_partial_color_format(f"{{RED}}Using unexpected filesystem type: {filesystem_type!r}"), file=sys.stderr);
#    print(ansi_partial_color_format("{RED}Expected 'btrfs' for fast COW"), file=sys.stderr);
# elif cp_version > (8, 32):
#    cp_version_str = '.'.join(map(str, cp_version))
#    print(ansi_partial_color_format(f"{{YELLOW}}Detected CP version: {cp_version_str} > 8.32"), file=sys.stderr)
#    print(ansi_partial_color_format(f"{{YELLOW}}GNU cp {cp_version_str} likely has --reflink=auto as default"), file=sys.stderr)
#    print(ansi_partial_color_format("{YELLOW}  - See coreutils commit: https://github.com/coreutils/coreutils/commit/25725f9d417"), file=sys.stderr)
#elif should_skip_startup_message('cp'):
#    pass # Skip message about override
#else:
#    print(ansi_partial_color_format("Overding cp to use {BOLD_DEFAULT}COW{DEFAULT} by default (btrfs)"))
#    aliases['cp'] = ['cp', '--reflink=auto']

def cheat_sh_list():
    # NOTE: We use the same cache file as the zsh completions
    cache_file = p"~/.cache/cheat.sh/list.txt".expanduser()
    from datetime import datetime, timedelta
    def _load_cached():
        with open(cache_file) as f:
            return [l.rstrip() for l in f.readlines()]
    try:
        modtime =  datetime.fromtimestamp(p"~/.cache/cheat.sh/list.txt".stat().st_mtime)
        if (datetime.now() - modtime) < timedelta(days=1):
            # Load directly from cache
            return _load_cached()
    except FileNotFoundError:
       pass
    ![curl -s cheat.sh/:list -o @(cache_file)]
    # TODO: Cache beyond just a file? If the user doesn't have a SSD they are screwed....
    return _load_cached()

SECRET_FILES = [
    Path(Path.home(), "keys/secrets.json"),
    Path(Path.home(), ".secrets.json")
]
def extract_secret(key):
    data = None
    for pth in SECRET_FILES:
        try:
            with open(pth) as f:
                data = json.load(f)
                break
        except FileNotFoundError as e:
            continue
    return get_by_key(data, key)

# Bitwarden API Key
# NOTE: Master password is still needed for decryption
$BW_CLIENTID=extract_secret("bitwarden.client_id")
$BW_CLIENTSECRET=extract_secret("bitwarden.client_secret")

if $(uname).strip() == "Darwin":
    aliases['python'] = ['python3']
    aliases['pip'] = ['pip3']

# cd should be pushd like it is in zsh
$AUTO_PUSHD=True

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
if !(test -f "/Users/nicholas/lib/mambaforge/bin/conda"):
    import sys as _sys
    from types import ModuleType as _ModuleType
    _mod = _ModuleType("xontrib.conda",
                    "Autogenerated from $(/Users/nicholas/lib/mambaforge/bin/conda shell.xonsh hook)")
    __xonsh__.execer.exec($("/Users/nicholas/lib/mambaforge/bin/conda" "shell.xonsh" "hook"),
                        glbs=_mod.__dict__,
                        filename="$(/Users/nicholas/lib/mambaforge/bin/conda shell.xonsh hook)")
    _sys.modules["xontrib.conda"] = _mod
    del _sys, _mod, _ModuleType
# <<< conda initialize <<<

